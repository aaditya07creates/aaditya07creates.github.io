I"Wr<p><br /></p>

<h2 id="introduction">Introduction</h2>

<p>My goal was to create a live-chat server that doesn’t require access to the internet. Phones and computers can connect to the server directly without having internet access, I wanted to create a chat server to help people from my neighbourhood be in contact with each other during power-cuts or internet outages which are common where I live.</p>

<h2 id="features">Features</h2>

<p>The goal of the game is simple:</p>

<ul>
  <li>Anyone in the range of the network can connect to it without a password.</li>
  <li>Connected users will have a designated colour for their IP adress.</li>
  <li>Users can show up in chats with their own username.</li>
  <li>Real time messaging.</li>
  <li>Intuitive web interface.
<br /></li>
</ul>

<h2 id="how-it-works">How it works</h2>

<ol>
  <li>
    <p>Setting Up the Network
The ESP32 is configured as an access point using the WiFi.softAP() method. Devices within range can connect to this network. The static IP 192.168.4.1 is assigned to the ESP32, which acts as a server and router.</p>
  </li>
  <li>
    <p>Hosting the Web Interface
The HTML, CSS, and JavaScript for the chat interface are embedded directly in the code as a string literal (page). When users access the server via a browser, the ESP32 sends this page to the client.</p>
  </li>
</ol>

<p><img src="/assets/img/chatserver.png" alt="Chat Window" /></p>

<ol>
  <li>
    <p>Handling User Connections
Each user is identified by their device’s IP address, which the ESP32 obtains using server.client().remoteIP(). A color code is generated for the IP for verification of identity incase of username change.</p>
  </li>
  <li>
    <p>Messaging service
Javascript on the page sends a POST request to the /send endpoint along with the message content.
The esp32 validates the username, length and trims extra spaces in the message.
The message is finally appended to the chatlog string.</p>
  </li>
</ol>

<p><img src="/assets/img/chatservererrormsg.png" alt="Error Message" /></p>

<ol>
  <li>Dynamic updates
The javascript on the client’s side periodically requests the server for updates on the user list and messages.</li>
</ol>

<p><br /></p>

<h2 id="future-additions">Future additions</h2>
<p><br />
To make this project better there are a couple of things we can do.</p>

<ul>
  <li>Chat moderation</li>
  <li>Chat log retention</li>
  <li>Accounts with verified usernames</li>
  <li>Extended range for esp32</li>
  <li>Better UI</li>
  <li>Faster refresh rate</li>
</ul>

<p><br /></p>

<h2 id="conclusion">Conclusion</h2>

<p>This project is a work in process and it would be awesome to see it being used in action in the real world. I can’t wait to make it better and contribute to my neighbourhood.</p>

<h2 id="code">Code</h2>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
</pre></td><td class="code"><pre><span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">WiFi</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>
<span class="err">#</span><span class="nx">include</span> <span class="o">&lt;</span><span class="nx">WebServer</span><span class="p">.</span><span class="nx">h</span><span class="o">&gt;</span>

<span class="c1">// Replace with your network credentials</span>
<span class="kd">const</span> <span class="nx">char</span><span class="o">*</span> <span class="nx">ssid</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">ESP32SERVER</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">char</span><span class="o">*</span> <span class="nx">password</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">051007</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// Create an ESP32 Web Server on port 80</span>
<span class="nx">WebServer</span> <span class="nf">server</span><span class="p">(</span><span class="mi">80</span><span class="p">);</span>

<span class="c1">// Predefined colors for IP addresses</span>
<span class="nb">String</span> <span class="nx">colors</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="dl">"</span><span class="s2">#FF5733</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#33FF57</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#3357FF</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#FF33A1</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#A133FF</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#FFC300</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#33FFF5</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">#FF5733</span><span class="dl">"</span><span class="p">};</span>
<span class="nx">int</span> <span class="nx">colorIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// Array to store IP addresses and their assigned colors</span>
<span class="nx">struct</span> <span class="nx">IPColor</span> <span class="p">{</span>
  <span class="nb">String</span> <span class="nx">ip</span><span class="p">;</span>
  <span class="nb">String</span> <span class="nx">color</span><span class="p">;</span>
  <span class="nb">String</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">IPColor</span> <span class="nx">ipColors</span><span class="p">[</span><span class="mi">255</span><span class="p">];</span> <span class="c1">// Array to hold up to 255 IPs</span>

<span class="c1">// HTML code for the chat page</span>
<span class="nb">String</span> <span class="nx">page</span> <span class="o">=</span> <span class="nx">R</span><span class="dl">"</span><span class="s2">rawliteral(
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;ESP32 Chat Server&lt;/title&gt;
  &lt;style&gt;
    body {
      background-color: #2c2f33;
      color: #dcdde1;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }
    h1 {
      margin: 20px 0;
      color: #7289da;
      font-size: 2rem;
    }
    #container {
      display: flex;
      align-items: flex-start;
      justify-content: center;
      width: 90%;
      max-width: 1200px;
    }
    #chatbox, #users {
      background-color: #23272a;
      border-radius: 10px;
      overflow-y: auto;
      padding: 20px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
      display: flex;
      flex-direction: column;
    }
    #chatbox {
      width: 65%;
      height: 500px;
      margin-right: 20px;
    }
    #users {
      width: 30%;
      height: 500px;
    }
    .message {
      border-radius: 10px;
      padding: 15px;
      margin: 10px 0;
      max-width: 100%;
      word-wrap: break-word;
      background-color: #4f545c;
      color: #dcdde1;
      font-size: 1.2rem;
    }
    .input-container {
      display: flex;
      flex-direction: row;
      align-items: center;
      width: 65%;
      margin: 20px 0;
    }
    input[type=</span><span class="dl">"</span><span class="nx">text</span><span class="dl">"</span><span class="s2">] {
      flex: 1;
      padding: 12px;
      border: none;
      border-radius: 5px;
      background-color: #40444b;
      color: #dcdde1;
      font-size: 16px;
    }
    button {
      padding: 12px 20px;
      border: none;
      border-radius: 5px;
      background-color: #7289da;
      color: white;
      font-size: 16px;
      cursor: pointer;
      margin-left: 10px;
    }
    button:hover {
      background-color: #677bc4;
    }
    .online-users {
      padding: 10px;
      background-color: #23272a;
      border-radius: 10px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
    }
    .online-users h2 {
      color: #7289da;
      font-size: 1.5rem;
      margin: 0 0 10px 0;
    }
    .user {
      padding: 10px;
      border-bottom: 1px solid #4f545c;
      color: #dcdde1;
    }
    .user:last-child {
      border-bottom: none;
    }
  &lt;/style&gt;
  &lt;script&gt;
    document.addEventListener('DOMContentLoaded', function() {
      var msgInput = document.getElementById(</span><span class="dl">"</span><span class="nx">msg</span><span class="dl">"</span><span class="s2">);
      msgInput.addEventListener(</span><span class="dl">"</span><span class="nx">keyup</span><span class="dl">"</span><span class="s2">, function(event) {
        if (event.key === </span><span class="dl">"</span><span class="nx">Enter</span><span class="dl">"</span><span class="s2">) {
          sendMessage();
        }
      });
    });

    function sendMessage() {
      var msg = document.getElementById(</span><span class="dl">"</span><span class="nx">msg</span><span class="dl">"</span><span class="s2">).value;
      var name = document.getElementById(</span><span class="dl">"</span><span class="nx">name</span><span class="dl">"</span><span class="s2">).value;
      if (msg.trim() === </span><span class="dl">""</span><span class="s2"> || msg.length &gt; 100) {
        alert(</span><span class="dl">"</span><span class="nx">Message</span> <span class="nx">cannot</span> <span class="nx">be</span> <span class="nx">blank</span> <span class="nx">and</span> <span class="nx">must</span> <span class="nx">be</span> <span class="nx">under</span> <span class="mi">100</span> <span class="nx">characters</span><span class="o">!</span><span class="dl">"</span><span class="s2">);
        return;
      }
      if (name.length &lt; 3) {
        alert(</span><span class="dl">"</span><span class="nx">Your</span> <span class="nx">name</span> <span class="nx">must</span> <span class="nx">be</span> <span class="nx">at</span> <span class="nx">least</span> <span class="mi">3</span> <span class="nx">characters</span> <span class="nx">long</span><span class="o">!</span><span class="dl">"</span><span class="s2">);
        return;
      }
      var xhttp = new XMLHttpRequest();
      xhttp.open(</span><span class="dl">"</span><span class="nx">POST</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="nx">send</span><span class="dl">"</span><span class="s2">, true);
      xhttp.setRequestHeader(</span><span class="dl">"</span><span class="nx">Content</span><span class="o">-</span><span class="nx">type</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="nx">application</span><span class="o">/</span><span class="nx">x</span><span class="o">-</span><span class="nx">www</span><span class="o">-</span><span class="nx">form</span><span class="o">-</span><span class="nx">urlencoded</span><span class="dl">"</span><span class="s2">);
      xhttp.send(</span><span class="dl">"</span><span class="nx">message</span><span class="o">=</span><span class="dl">"</span><span class="s2"> + name + </span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2"> + msg);
      document.getElementById(</span><span class="dl">"</span><span class="nx">msg</span><span class="dl">"</span><span class="s2">).value = </span><span class="dl">""</span><span class="s2">;
    }

    function refreshMessages() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 &amp;&amp; this.status == 200) {
          document.getElementById(</span><span class="dl">"</span><span class="nx">chatbox</span><span class="dl">"</span><span class="s2">).innerHTML = this.responseText;
          var chatbox = document.getElementById(</span><span class="dl">"</span><span class="nx">chatbox</span><span class="dl">"</span><span class="s2">);
          chatbox.scrollTop = chatbox.scrollHeight; // Scroll to the bottom
        }
      };
      xhttp.open(</span><span class="dl">"</span><span class="nx">GET</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="nx">chat</span><span class="dl">"</span><span class="s2">, true);
      xhttp.send();
    }

    function refreshUsers() {
      var xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 &amp;&amp; this.status == 200) {
          document.getElementById(</span><span class="dl">"</span><span class="nx">users</span><span class="dl">"</span><span class="s2">).innerHTML = this.responseText;
        }
      };
      xhttp.open(</span><span class="dl">"</span><span class="nx">GET</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="nx">users</span><span class="dl">"</span><span class="s2">, true);
      xhttp.send();
    }

    setInterval(refreshMessages, 1000); // Refresh chat every 1 second
    setInterval(refreshUsers, 5000); // Refresh online users every 5 seconds
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;ESP32 Chat Server&lt;/h1&gt;
  &lt;div id=</span><span class="dl">"</span><span class="nx">container</span><span class="dl">"</span><span class="s2">&gt;
    &lt;div id=</span><span class="dl">"</span><span class="nx">chatbox</span><span class="dl">"</span><span class="s2">&gt;
      &lt;!-- Chat messages will be displayed here --&gt;
    &lt;/div&gt;
    &lt;div id=</span><span class="dl">"</span><span class="nx">users</span><span class="dl">"</span><span class="s2"> class=</span><span class="dl">"</span><span class="nx">online</span><span class="o">-</span><span class="nx">users</span><span class="dl">"</span><span class="s2">&gt;
      &lt;!-- Online users will be displayed here --&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=</span><span class="dl">"</span><span class="nx">input</span><span class="o">-</span><span class="nx">container</span><span class="dl">"</span><span class="s2">&gt;
    &lt;input type=</span><span class="dl">"</span><span class="nx">text</span><span class="dl">"</span><span class="s2"> id=</span><span class="dl">"</span><span class="nx">name</span><span class="dl">"</span><span class="s2"> placeholder=</span><span class="dl">"</span><span class="nx">Your</span> <span class="nx">name</span><span class="dl">"</span><span class="s2">&gt;
    &lt;input type=</span><span class="dl">"</span><span class="nx">text</span><span class="dl">"</span><span class="s2"> id=</span><span class="dl">"</span><span class="nx">msg</span><span class="dl">"</span><span class="s2"> placeholder=</span><span class="dl">"</span><span class="nx">Your</span> <span class="nx">message</span><span class="dl">"</span><span class="s2">&gt;
    &lt;button onclick=</span><span class="dl">"</span><span class="nf">sendMessage</span><span class="p">()</span><span class="dl">"</span><span class="s2">&gt;Send&lt;/button&gt;
  &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
)rawliteral</span><span class="dl">"</span><span class="p">;</span>


<span class="c1">// String to hold chat messages</span>
<span class="nb">String</span> <span class="nx">chatLog</span> <span class="o">=</span> <span class="dl">""</span><span class="p">;</span>

<span class="c1">// Function to get color for an IP</span>
<span class="nb">String</span> <span class="nf">getColorForIP</span><span class="p">(</span><span class="nx">IPAddress</span> <span class="nx">ip</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">String</span> <span class="nx">ipStr</span> <span class="o">=</span> <span class="nx">ip</span><span class="p">.</span><span class="nf">toString</span><span class="p">();</span>
  <span class="k">for </span><span class="p">(</span><span class="nx">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">colorIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">ipColors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">ip</span> <span class="o">==</span> <span class="nx">ipStr</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">ipColors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">color</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c1">// Assign a new color</span>
  <span class="nx">ipColors</span><span class="p">[</span><span class="nx">colorIndex</span><span class="p">].</span><span class="nx">ip</span> <span class="o">=</span> <span class="nx">ipStr</span><span class="p">;</span>
  <span class="nx">ipColors</span><span class="p">[</span><span class="nx">colorIndex</span><span class="p">].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">colors</span><span class="p">[</span><span class="nx">colorIndex</span> <span class="o">%</span> <span class="p">(</span><span class="nf">sizeof</span><span class="p">(</span><span class="nx">colors</span><span class="p">)</span> <span class="o">/</span> <span class="nf">sizeof</span><span class="p">(</span><span class="nx">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">]))];</span>
  <span class="nx">colorIndex</span><span class="o">++</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">ipColors</span><span class="p">[</span><span class="nx">colorIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">color</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Function to get the online users</span>
<span class="nb">String</span> <span class="nf">getOnlineUsers</span><span class="p">()</span> <span class="p">{</span>
  <span class="nb">String</span> <span class="nx">userList</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">&lt;h2&gt;Online Users&lt;/h2&gt;</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">for </span><span class="p">(</span><span class="nx">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">colorIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">userList</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;div class='user'&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">ipColors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/div&gt;</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">userList</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">Serial</span><span class="p">.</span><span class="nf">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>

  <span class="c1">// Set up Wi-Fi as an access point</span>
  <span class="nx">WiFi</span><span class="p">.</span><span class="nf">softAP</span><span class="p">(</span><span class="nx">ssid</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span>

  <span class="c1">// Define the server routes</span>
  <span class="nx">server</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">/</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HTTP_GET</span><span class="p">,</span> <span class="p">[]()</span> <span class="p">{</span>
    <span class="nx">server</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="p">,</span> <span class="nx">page</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">server</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">/send</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HTTP_POST</span><span class="p">,</span> <span class="p">[]()</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nf">hasArg</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">))</span> <span class="p">{</span>
      <span class="nb">String</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">arg</span><span class="p">(</span><span class="dl">"</span><span class="s2">message</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">message</span><span class="p">.</span><span class="nf">trim</span><span class="p">();</span> <span class="c1">// Manually trim the string</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nf">length</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">100</span> <span class="o">&amp;&amp;</span> <span class="nx">message</span> <span class="o">!=</span> <span class="dl">""</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">String</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nf">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">message</span><span class="p">.</span><span class="nf">indexOf</span><span class="p">(</span><span class="dl">"</span><span class="s2">:</span><span class="dl">"</span><span class="p">));</span>
        <span class="nx">name</span><span class="p">.</span><span class="nf">trim</span><span class="p">();</span> <span class="c1">// Ensure the name is properly trimmed</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nf">length</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">IPAddress</span> <span class="nx">clientIP</span> <span class="o">=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">client</span><span class="p">().</span><span class="nf">remoteIP</span><span class="p">();</span>
          <span class="nb">String</span> <span class="nx">color</span> <span class="o">=</span> <span class="nf">getColorForIP</span><span class="p">(</span><span class="nx">clientIP</span><span class="p">);</span>
          <span class="k">for </span><span class="p">(</span><span class="nx">int</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">colorIndex</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">ipColors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">ip</span> <span class="o">==</span> <span class="nx">clientIP</span><span class="p">.</span><span class="nf">toString</span><span class="p">())</span> <span class="p">{</span>
              <span class="nx">ipColors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
              <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
          <span class="p">}</span>
          <span class="nx">chatLog</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">&lt;div class='message' style='border-left: 5px solid </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">color</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">'&gt;</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">message</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">&lt;/div&gt;</span><span class="dl">"</span><span class="p">;</span>
          <span class="nx">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">server</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text/plain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Message received</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">server</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">/chat</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HTTP_GET</span><span class="p">,</span> <span class="p">[]()</span> <span class="p">{</span>
    <span class="nx">server</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="p">,</span> <span class="nx">chatLog</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">server</span><span class="p">.</span><span class="nf">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">/users</span><span class="dl">"</span><span class="p">,</span> <span class="nx">HTTP_GET</span><span class="p">,</span> <span class="p">[]()</span> <span class="p">{</span>
    <span class="nx">server</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="dl">"</span><span class="s2">text/html</span><span class="dl">"</span><span class="p">,</span> <span class="nf">getOnlineUsers</span><span class="p">());</span>
  <span class="p">});</span>

    <span class="c1">// Start the server</span>
  <span class="nx">server</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>
  <span class="nx">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="dl">"</span><span class="s2">Server started</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// Handle client requests</span>
  <span class="nx">server</span><span class="p">.</span><span class="nf">handleClient</span><span class="p">();</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET