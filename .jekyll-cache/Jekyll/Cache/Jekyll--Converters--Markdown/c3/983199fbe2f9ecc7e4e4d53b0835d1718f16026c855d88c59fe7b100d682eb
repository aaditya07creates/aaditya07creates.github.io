I"9Ì<p><br /></p>

<h2 id="an-automated-ai-channel">An automated A.I. channel</h2>
<p>For the past year we‚Äôve seen a lot of A.I. generated content on youtube. Now there is a difference between A.I. generated and automation we must understand first, A.I. (artificial intelligence) generated content is the content A.I. thinks of, for example a script for a video, the thumbnail or even the voiceover. Automated on the other hand is making the process autonomous or requiring minimum human intervention. Keep in mind I have written ‚Äúautomated A.i. channel‚Äù and not ‚ÄúA.I. automated channel‚Äù since A.I. is not the one that is automating the process. Thats enough of saying A.I. for now. Check out the channel <a href="https://beautifuljekyll.com/faq/#links-in-project-page">here!</a></p>

<p>In this project i‚Äôve explored multiple ways of doing both A.I. integration and automation.</p>

<h2 id="project-outline">Project outline</h2>
<p>Basically being lazy leads you to want to create a project like this, my goal is to create a youtube channel that doesnt require much or any input from me after it‚Äôs set up.
When you want to create an automated channel you need to sacrifice either A.I. and automation or quality, i‚Äôve explored many combinations of both and in the end chose what I liked the most. For this project i‚Äôve used python to make the script for generating the videos. The terms used in the project are going to be pretty basic for the general public to understand.</p>

<h2 id="how-to-make-a-youtube-video">How to make a youtube video</h2>

<p>Now first let us discuss the basics, i‚Äôve chosen to make youtube shorts to keep the project simple and easy. The topic for our youtube channel will be quotes.</p>

<p class="box-note"><strong>Note:</strong>
   Its good to stick to a particular theme and topic to attract returning viewers and to gain subscribers. The youtube algorithm likes these sort of channels.</p>

<p><br /></p>

<p>To make a youtube video (shorts) about a topic (quotes) there is a process.</p>
<ul>
  <li>Search for a quote in a book or online</li>
  <li>Look for a background video to make video attractive</li>
  <li>Find a fitting audio</li>
  <li>Put everything together in and editing software</li>
  <li>Upload it to youtube</li>
</ul>

<p>Well it looks pretty simple, let‚Äôs get to making our channel.</p>

<h2 id="searching-for-a-quote">Searching for a quote</h2>
<p>The first step for a quotes channel is to search for a quote (obviously).
You can read a book of quotes, search online on a website, or look at your social media‚Äôs good morning messages.
Well I chose to ask A.I. for my quotes. Now there are many LLM models out there like google‚Äôs Gemini, meta‚Äôs Llama, openai‚Äôs ChatGPT. We can directly start a conversation and request a quote from there, but this is long and tiring (for me). So I decided to use an API. An API is like a way to ask one of the LLMs from a script or peice of code without needing to visit the website. It requires a ‚Äúkey‚Äù that is like a password to understand who is accessing the model and how much. I decided to go with ChatGPT, that failed terribly. Using a model requires a currency called ‚Äútokens‚Äù most of the time, and i had none. They used to give free tokens for trials but they stopped recently :c and required billing which i was not ready for. Then i decided to use another LLM hugging face, this model gave me an API for free :D (with a per-day limit of course). I put this into a simple python script after importing some libraries to ask for a quote, here was my prompt.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Give me a quote that is inspirational/sad/heartwarming along with the author's name.
It should be one line long.
</code></pre></div></div>

<p>Its response was something like this.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here is your quote
"The only way to do great work is to love what you do"
This quote was given by Steve Jobs at a 2005 commencement speech at Stanford University.
Would you like some more quotes?
</code></pre></div></div>

<p>Now if I wanted to automate everything and not look at each step i couldn‚Äôt have it giving answers like this, it should have had a proper format and be easy to add to the video.
I tried redesigning the prompt alot but it didn‚Äôt work out, I knew the same would happen with other LLMs too and they might give the same quote twice. So I decided to go for quality here in this step than 100% automation, I asked ChatGPT to give me a list of 100 quotes in the form of a CSV (comma seperated values) file according to my need. This was great, the format was like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Quote text", "Author", "n"
</code></pre></div></div>
<p>The quote text is followed by the author name and then a letter ‚Äúy‚Äù or ‚Äún‚Äù but we will come back to that later.</p>

<p>Since the quote collection was done it was time to move to the next step, a rather complicated one.</p>

<h2 id="looking-for-background-videos">Looking for background videos</h2>
<p>Our quotes are inspirational mostly and calming so we need a fitting background to make sure viewers don‚Äôt scroll past. It could be an image or video but I decided to go for a video to make it a bit more attention grabbing. I searched online for some APIs like we did for the LLMs but this time to retreive videos from the site.</p>

<p>I found a couple of free and awesome APIs like Pexels and Pixbay (a few others too). I began using Pixbay but it wasn‚Äôt retrieving footage for some reason, i‚Äôm still not sure why. Then I looked at Pexels, this API worked well, i was able to download videos based on the keywords and dimensions (a youtube shorts video dimension is 9:16). I came across a problem though, the downloading was working well but the videos didn‚Äôt always fit the theme and some of them were too long.</p>

<p>Now we arrive at the crossroads again, do we want quality or automation. I decided to go for quality, by that I mean I spent hours manually choosing and downloading non-copyrighted stock videos that I liked. I collected 29 videos that fit the aspect ratio and asthetics. In the end I feel that it was the best choice because it will help attract even more viewers.</p>

<h2 id="finding-a-fitting-audio">Finding a fitting audio</h2>
<p>Now at this point I was tired of looking for APIs and decided to do manual collection, It would have resulted in problems like long audio selection, audio that doesnt match the theme, or audio that is too loud or too quiet. I looked online and downladed a few songs.</p>

<h2 id="putting-everything-together">Putting everything together</h2>
<p>Well now the real automation begins. What I plan to do is use python to combine the audio and video and add a text overlay. So I made a basic folder structure on my computer to keep things organized.</p>

<ul>
  <li>automatedvidgen
    <ul>
      <li>audios</li>
      <li>finishedvideos</li>
      <li>graphics
        <ul>
          <li>Banner image</li>
          <li>Logo image</li>
        </ul>
      </li>
      <li>videos</li>
      <li>quotes.txt</li>
      <li>quotesreset.txt</li>
      <li>script.py</li>
    </ul>
  </li>
</ul>

<p>With the folder structure done we move onto the main code.</p>

<p>I imported the libraries we needed:</p>
<ul>
  <li>MoviePy to handle video editing, adding text, adding audio and combining clips</li>
  <li>PIL (pillow) to create images that contain the text overlays</li>
  <li>Numpy which is required by moviepy to process data</li>
  <li>OS for working with directories and file paths</li>
</ul>

<p>Let us discuss the functions I wrote now.</p>

<h3 id="1-wrap_texttext-font-max_width">1. wrap_text(text, font, max_width)</h3>
<p>This function is for breaking up a long quote onto multiple lines by iterating through each word and checking if it fits in the line. It finally returns the wrapped text with newline characters to represent split lines.</p>

<h3 id="2-create_text_cliptext-author-quote_fontsize-author_fontsize-ai_text_fontsize-color-size-padding-duration">2. create_text_clip(text, author, quote_fontsize, author_fontsize, ai_text_fontsize, color, size, padding, duration)</h3>
<p>This chonky function is for creating the text clip that will be added to the video. First i create a dark grey background that will be made transparent to make sure the text is visible when on top of the video. I call the wrap_text function to deal with the text wrapping, then i position all the texts and draw them using the ImageDraw.Draw method. The image is finally converted into a numpy array and returned to be used as a MoviePy clip.</p>

<h3 id="3-create_short_videoautomatedvideogen_path">3. create_short_video(automatedvideogen_path)</h3>
<p>This is our main function which handles the video creation. It reads the quotes from the quotes.txt and selects a quote by random, next it selects a random video from the videos folder and removes the audio. A random audio is selected from the audios file and the video is looped and cut according to the length of the audio automatically. It forms a new clip with the CompositeVideoClip function to combine the clips and audios. The final file is finally compiled using 16 threads of my CPU for speed at 60fps and is stored in the finishedvideos folder with its file name created dynamically using the generate_ouput_file_name function I wrote.</p>

<h3 id="4-update_quote_status">4. update_quote_status</h3>
<p>This function aimply sets the status of the quote in the quotes.txt to yes indicating we musn‚Äôt use it in a video again.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Quote text", "Author", "y"
</code></pre></div></div>
<h3 id="5-finishing-up">5. Finishing up</h3>
<p>The program loops the number of time you want it to create how many ever videos you want with a prompt when you run the program.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How many videos would you like to generate? 5
</code></pre></div></div>

<p class="box-warning"><strong>Warning:</strong> Run the program directly in terminal and not in Python IDLE or Pycharm terminal. Running it in here will cause it to begin video generation but the process will never complete and will be stuck or take a lot of time.</p>

<h2 id="conclusion">Conclusion</h2>
<p>This project was pretty fun, it gave me a chance to learn and apply my knowledge about APIs, automation and also about youtube channels. Initially it takes some time to set-up but after you complete it you can create videos in bulk. You can see the final result <a href="https://beautifuljekyll.com/faq/#links-in-project-page">here!</a></p>

<h2 id="code">Code</h2>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
</pre></td><td class="code"><pre><span class="k">from</span> <span class="nx">moviepy</span><span class="p">.</span><span class="nx">editor</span> <span class="k">import</span> <span class="o">*</span>
<span class="k">import</span> <span class="nx">random</span>
<span class="k">from</span> <span class="nx">PIL</span> <span class="k">import</span> <span class="nx">Image</span><span class="p">,</span> <span class="nx">ImageDraw</span><span class="p">,</span> <span class="nx">ImageFont</span>
<span class="k">import</span> <span class="nx">numpy</span> <span class="nx">as</span> <span class="nx">np</span>
<span class="k">import</span> <span class="nx">os</span>
<span class="k">from</span> <span class="nx">googleapiclient</span><span class="p">.</span><span class="nx">discovery</span> <span class="k">import</span> <span class="nx">build</span>
<span class="k">from</span> <span class="nx">googleapiclient</span><span class="p">.</span><span class="nx">http</span> <span class="k">import</span> <span class="nx">MediaFileUpload</span>
<span class="k">from</span> <span class="nx">google</span><span class="p">.</span><span class="nx">oauth2</span><span class="p">.</span><span class="nx">credentials</span> <span class="k">import</span> <span class="nx">Credentials</span>

<span class="nx">description</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">#ShortVideo #InspirationalVideo #MotivationalVideo #QuoteVideo #VideoEditing #TextOnVideo #CinematicVideo #ShortClips #MovieClips #VideoQuotes #BestQuotes #MotivationalQuotes #InspirationalQuotes #FamousQuotes #DailyQuotes #QuoteOfTheDay #VideoArt #VideoCreation #CreativeVideo #ArtisticVideo #InspirationalQuotes #MotivationalQuotes #QuotesFromFamousPeople #LifeQuotes #SuccessQuotes #LoveQuotes #HappinessQuotes #WisdomQuotes #QuoteOnLife #AuthorQuotes #InspirationalSayings #LifeLessons #LifeAdvice #LifeMotivation #PositiveQuotes #PowerfulQuotes #DeepQuotes #ThoughtfulQuotes #EncouragingQuotes #MoviePy #VideoEditor #PythonVideoEditing #CompositeVideo #TextAnimation #VideoClipGenerator #ShortFilm #MoviePyEditor #AIGeneratedVideo #TextClip #InspiringVideo #MotivationDaily #QuotesInMotion #QuoteOverlay #Quotelet #FamousAuthors #QuoteDesign #CreativeEditing #VideoOfTheDay #PositiveVibes #MotivationMonday #ThoughtOfTheDay #QuoteLife #TextOverlay #VideoCreationTool #PythonEditing #VideoMaker #InspirationDaily #TextEffects #QuoteOnScreen #QuoteGraphics #FamousQuoteVideo #MotivationalSpeech #QuoteToLiveBy #QuoteWallpaper #WordsOfWisdom #VideoInspiration #ShortQuoteVideo #VideoMotivation #WisdomInWords #LifeWisdom #EmpowermentQuotes #EncouragementVideo #SuccessMindset #GoalsInLife #PositiveMindset #MoviePyEditing #VideoWithText #PowerfulWords #ShortInspiration #DailyMotivation #SuccessQuotesDaily #SelfGrowth #LifeInspiration #VideoProduction #QuotesThatInspire #InspirationalClip #MindsetMatters #MindsetQuotes #EmpowermentVideo #LifeChangingQuotes #QuotesDaily #InspirationalWords #LifeQuotes #WisdomQuotes #PowerfulQuotes #SuccessDaily #MotivationInMinutes #UpliftingWords #LifeGoals #PositiveThinking #PersonalGrowth #InspirationQuotes #VideoEditing #CreativeVideos #QuoteletVideo #MindsetShift #EncouragingWords #VideoInspo #QuoteCreatives #PositiveQuotes #TextOnScreen #QuotesWithVideo #ShortInspirationalVideo #WisdomOfTheDay #FamousQuotesDaily #QuoteMastery #InspirationalShorts #MotivationalQuotes #SuccessMotivation #AchievementQuotes #GrowthMindset #SelfImprovement #LifeChangingWords #DreamBig #DailyQuotes #InspirationalStory #SuccessJourney #VideoInspiration #LifeChangingInspiration #DreamQuotes #DailyWordsOfWisdom #MindsetGoals #PurposeDrivenLife #TextVideo #QuoteLovers #TextArtVideo #SuccessDriven #EncouragementQuotes #WisdomWords #MotivationBoost #QuotesOfGreatness #PositiveVibesOnly #LifeMantra #GoalOriented #FocusOnSuccess #TextAnimation #MindsetMotivation #WordsOfEncouragement</span><span class="dl">"</span>

<span class="err">#</span> <span class="nx">Wrap</span> <span class="nx">text</span> <span class="kd">function</span> <span class="nf">to</span> <span class="nx">fit</span> <span class="nx">within</span> <span class="nx">the</span> <span class="nx">specified</span> <span class="nx">width</span>
<span class="nx">def</span> <span class="nf">wrap_text</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">font</span><span class="p">,</span> <span class="nx">max_width</span><span class="p">):</span>
    <span class="nx">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nx">words</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
    <span class="nx">current_line</span> <span class="o">=</span> <span class="dl">""</span>

    <span class="k">for</span> <span class="nx">word</span> <span class="k">in</span> <span class="nx">words</span><span class="p">:</span>
        <span class="nx">test_line</span> <span class="o">=</span> <span class="nx">f</span><span class="dl">"</span><span class="s2">{current_line} {word}</span><span class="dl">"</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="nx">text_bbox</span> <span class="o">=</span> <span class="nx">font</span><span class="p">.</span><span class="nf">getbbox</span><span class="p">(</span><span class="nx">test_line</span><span class="p">)</span>
        <span class="nx">text_width</span> <span class="o">=</span> <span class="nx">text_bbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">text_bbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="err">#</span> <span class="nx">Calculate</span> <span class="nx">width</span> <span class="k">from</span> <span class="nx">bbox</span>
        <span class="k">if</span> <span class="nx">text_width</span> <span class="o">&lt;=</span> <span class="nx">max_width</span><span class="p">:</span>
            <span class="nx">current_line</span> <span class="o">=</span> <span class="nx">test_line</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nx">current_line</span><span class="p">:</span>  <span class="err">#</span> <span class="nx">Avoid</span> <span class="nx">appending</span> <span class="nx">empty</span> <span class="nx">lines</span>
                <span class="nx">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">current_line</span><span class="p">)</span>
            <span class="nx">current_line</span> <span class="o">=</span> <span class="nx">word</span>

    <span class="k">if</span> <span class="nx">current_line</span><span class="p">:</span>  <span class="err">#</span> <span class="nx">Append</span> <span class="nx">any</span> <span class="nx">remaining</span> <span class="nx">text</span>
        <span class="nx">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nx">current_line</span><span class="p">)</span>
    <span class="k">return</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span>



<span class="err">#</span> <span class="nx">Create</span> <span class="nx">a</span> <span class="nx">text</span> <span class="nx">clip</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">quote</span><span class="p">,</span> <span class="nx">author</span><span class="p">,</span> <span class="nx">AI</span> <span class="nx">text</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">watermark</span>
<span class="nx">def</span> <span class="nf">create_text_clip</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">author</span><span class="p">,</span> <span class="nx">quote_fontsize</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="nx">author_fontsize</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="nx">ai_text_fontsize</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="nx">color</span><span class="o">=</span><span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span> <span class="nx">size</span><span class="o">=</span><span class="p">(</span><span class="mi">1280</span><span class="p">,</span> <span class="mi">720</span><span class="p">),</span> <span class="nx">padding</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="nx">duration</span><span class="o">=</span><span class="mi">30</span><span class="p">):</span>
    <span class="nx">img</span> <span class="o">=</span> <span class="nx">Image</span><span class="p">.</span><span class="k">new</span><span class="p">(</span><span class="dl">"</span><span class="s2">RGBA</span><span class="dl">"</span><span class="p">,</span> <span class="nx">size</span><span class="p">,</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">180</span><span class="p">)</span>  <span class="err">#</span> <span class="nx">Dark</span> <span class="nx">gray</span> <span class="nx">background</span>
    <span class="nx">draw</span> <span class="o">=</span> <span class="nx">ImageDraw</span><span class="p">.</span><span class="nc">Draw</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Load</span> <span class="nx">fonts</span> <span class="k">for</span> <span class="nx">text</span>
    <span class="nx">quote_font</span> <span class="o">=</span> <span class="nx">ImageFont</span><span class="p">.</span><span class="nf">truetype</span><span class="p">(</span><span class="dl">"</span><span class="s2">arial.ttf</span><span class="dl">"</span><span class="p">,</span> <span class="nx">quote_fontsize</span><span class="p">)</span>
    <span class="nx">author_font</span> <span class="o">=</span> <span class="nx">ImageFont</span><span class="p">.</span><span class="nf">truetype</span><span class="p">(</span><span class="dl">"</span><span class="s2">arial.ttf</span><span class="dl">"</span><span class="p">,</span> <span class="nx">author_fontsize</span><span class="p">)</span>
    <span class="nx">ai_text_font</span> <span class="o">=</span> <span class="nx">ImageFont</span><span class="p">.</span><span class="nf">truetype</span><span class="p">(</span><span class="dl">"</span><span class="s2">arial.ttf</span><span class="dl">"</span><span class="p">,</span> <span class="nx">ai_text_fontsize</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Calculate</span> <span class="nx">drawing</span> <span class="nx">area</span>
    <span class="nx">drawing_area_width</span> <span class="o">=</span> <span class="nx">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">padding</span>
    <span class="nx">drawing_area_height</span> <span class="o">=</span> <span class="nx">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">padding</span>

    <span class="err">#</span> <span class="nx">Wrap</span> <span class="nx">the</span> <span class="nx">quote</span> <span class="nx">text</span> <span class="nx">to</span> <span class="nx">fit</span>
    <span class="nx">wrapped_text</span> <span class="o">=</span> <span class="nf">wrap_text</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">quote_font</span><span class="p">,</span> <span class="nx">drawing_area_width</span><span class="p">)</span>
    <span class="nx">author_text</span> <span class="o">=</span> <span class="nx">f</span><span class="dl">"</span><span class="s2">~ {author}</span><span class="dl">"</span>
    <span class="nx">ai_text</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">An automated A.I. channel</span><span class="dl">"</span>  <span class="err">#</span> <span class="nx">Updated</span> <span class="nx">text</span> <span class="nx">here</span>

    <span class="err">#</span> <span class="nx">Draw</span> <span class="nx">the</span> <span class="nx">text</span> <span class="nx">onto</span> <span class="nx">the</span> <span class="nx">image</span>
    <span class="nx">quote_bbox</span> <span class="o">=</span> <span class="nx">draw</span><span class="p">.</span><span class="nf">textbbox</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">wrapped_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">quote_font</span><span class="p">)</span>
    <span class="nx">text_width</span><span class="p">,</span> <span class="nx">text_height</span> <span class="o">=</span> <span class="nx">quote_bbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">quote_bbox</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">quote_bbox</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="nx">quote_bbox</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="nx">text_x</span> <span class="o">=</span> <span class="nx">padding</span>
    <span class="nx">text_y</span> <span class="o">=</span> <span class="nf">max</span><span class="p">((</span><span class="nx">drawing_area_height</span> <span class="o">-</span> <span class="nx">text_height</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="nx">padding</span><span class="p">,</span> <span class="nx">padding</span><span class="p">)</span>
    <span class="nx">draw</span><span class="p">.</span><span class="nf">text</span><span class="p">((</span><span class="nx">text_x</span><span class="p">,</span> <span class="nx">text_y</span><span class="p">),</span> <span class="nx">wrapped_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">quote_font</span><span class="p">,</span> <span class="nx">fill</span><span class="o">=</span><span class="nx">color</span><span class="p">)</span>

    <span class="nx">author_y</span> <span class="o">=</span> <span class="nx">text_y</span> <span class="o">+</span> <span class="nx">text_height</span> <span class="o">+</span> <span class="mi">20</span>
    <span class="nx">draw</span><span class="p">.</span><span class="nf">text</span><span class="p">((</span><span class="nx">text_x</span><span class="p">,</span> <span class="nx">author_y</span><span class="p">),</span> <span class="nx">author_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">author_font</span><span class="p">,</span> <span class="nx">fill</span><span class="o">=</span><span class="nx">color</span><span class="p">)</span>

    <span class="nx">ai_bbox</span> <span class="o">=</span> <span class="nx">draw</span><span class="p">.</span><span class="nf">textbbox</span><span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="nx">ai_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">ai_text_font</span><span class="p">)</span>
    <span class="nx">ai_text_x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="p">(</span><span class="nx">ai_bbox</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">-</span> <span class="nx">ai_bbox</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">/</span> <span class="mi">2</span>
    <span class="nx">ai_text_y</span> <span class="o">=</span> <span class="nx">author_y</span> <span class="o">+</span> <span class="nx">author_fontsize</span> <span class="o">+</span> <span class="mi">80</span>
    <span class="nx">draw</span><span class="p">.</span><span class="nf">text</span><span class="p">((</span><span class="nx">ai_text_x</span><span class="p">,</span> <span class="nx">ai_text_y</span><span class="p">),</span> <span class="nx">ai_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">ai_text_font</span><span class="p">,</span> <span class="nx">fill</span><span class="o">=</span><span class="nx">color</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Add</span> <span class="nx">watermark</span>
    <span class="nx">watermark_text</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Quotelet</span><span class="dl">"</span>
    <span class="nx">watermark_fontsize</span> <span class="o">=</span> <span class="mi">30</span>
    <span class="nx">watermark_font</span> <span class="o">=</span> <span class="nx">ImageFont</span><span class="p">.</span><span class="nf">truetype</span><span class="p">(</span><span class="dl">"</span><span class="s2">arial.ttf</span><span class="dl">"</span><span class="p">,</span> <span class="nx">watermark_fontsize</span><span class="p">)</span>
    <span class="nx">watermark_x</span> <span class="o">=</span> <span class="nx">padding</span>
    <span class="nx">watermark_y</span> <span class="o">=</span> <span class="nx">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">padding</span> <span class="o">-</span> <span class="nx">watermark_fontsize</span>
    <span class="nx">draw</span><span class="p">.</span><span class="nf">text</span><span class="p">((</span><span class="nx">watermark_x</span><span class="p">,</span> <span class="nx">watermark_y</span><span class="p">),</span> <span class="nx">watermark_text</span><span class="p">,</span> <span class="nx">font</span><span class="o">=</span><span class="nx">watermark_font</span><span class="p">,</span> <span class="nx">fill</span><span class="o">=</span><span class="nx">color</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Convert</span> <span class="nx">to</span> <span class="nx">NumPy</span> <span class="nx">array</span> <span class="k">for</span> <span class="nx">video</span> <span class="nx">processing</span>
    <span class="nx">img_np</span> <span class="o">=</span> <span class="nx">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nx">img</span><span class="p">)</span>
    <span class="nx">img_clip</span> <span class="o">=</span> <span class="nc">ImageClip</span><span class="p">(</span><span class="nx">img_np</span><span class="p">).</span><span class="nf">set_duration</span><span class="p">(</span><span class="nx">duration</span><span class="p">).</span><span class="nf">set_position</span><span class="p">(</span><span class="dl">'</span><span class="s1">center</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">img_clip</span>

<span class="nx">def</span> <span class="nf">create_short_video</span><span class="p">(</span><span class="nx">automatedvidgen_path</span><span class="p">):</span>
    <span class="nx">quotes_file</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:/Users/aadit/Downloads/automatedvidgen/quotes.txt</span><span class="dl">"</span>
    <span class="nx">video_folder</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:/Users/aadit/Downloads/automatedvidgen/videos</span><span class="dl">"</span>
    <span class="nx">audio_folder</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:/Users/aadit/Downloads/automatedvidgen/audios</span><span class="dl">"</span>
    <span class="nx">finished_videos_folder</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:/Users/aadit/Downloads/automatedvidgen/finishedvideos</span><span class="dl">"</span>

    <span class="kd">with</span> <span class="nf">open</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">,</span> <span class="dl">'</span><span class="s1">r</span><span class="dl">'</span><span class="p">,</span> <span class="nx">encoding</span><span class="o">=</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">f</span><span class="p">:</span>
        <span class="nx">quotes</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>

    <span class="err">#</span> <span class="nx">Get</span> <span class="nx">a</span> <span class="nx">list</span> <span class="k">of</span> <span class="nx">available</span> <span class="nx">quotes</span> <span class="nx">and</span> <span class="nx">their</span> <span class="nx">original</span> <span class="nx">indexes</span>
    <span class="nx">available_quotes</span> <span class="o">=</span> <span class="p">[(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">quote</span><span class="p">)</span> <span class="k">for</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">quote</span> <span class="k">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nx">quotes</span><span class="p">)</span> <span class="k">if</span> <span class="dl">'</span><span class="s1">", "n"</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">quote</span><span class="p">]</span>
    <span class="k">if</span> <span class="nx">not</span> <span class="nx">available_quotes</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">No available quotes left to use.</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">None</span>

    <span class="err">#</span> <span class="nx">Randomly</span> <span class="nx">select</span> <span class="nx">a</span> <span class="nx">quote</span> <span class="k">from</span> <span class="nx">the</span> <span class="nx">available</span> <span class="nx">quotes</span>
    <span class="nx">selected_quote_index</span><span class="p">,</span> <span class="nx">selected_quote</span> <span class="o">=</span> <span class="nx">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nx">available_quotes</span><span class="p">)</span>

    <span class="nx">parts</span> <span class="o">=</span> <span class="nx">selected_quote</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">", "</span><span class="dl">'</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="nx">parts</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="nx">quote_text</span> <span class="o">=</span> <span class="nx">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
        <span class="nx">author</span> <span class="o">=</span> <span class="nx">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">'</span><span class="s1">Skipping line due to incorrect format: {selected_quote}</span><span class="dl">'</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">None</span>

    <span class="nx">video_files</span> <span class="o">=</span> <span class="p">[</span><span class="nx">f</span> <span class="k">for</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="nx">video_folder</span><span class="p">)</span> <span class="k">if</span> <span class="nx">f</span><span class="p">.</span><span class="nf">endswith</span><span class="p">((</span><span class="dl">'</span><span class="s1">.mp4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.mov</span><span class="dl">'</span><span class="p">))]</span>
    <span class="k">if</span> <span class="nx">not</span> <span class="nx">video_files</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">No video files found.</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">None</span>

    <span class="nx">selected_video</span> <span class="o">=</span> <span class="nx">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nx">video_files</span><span class="p">)</span>
    <span class="nx">video_path</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">video_folder</span><span class="p">,</span> <span class="nx">selected_video</span><span class="p">)</span>
    <span class="nx">video</span> <span class="o">=</span> <span class="nc">VideoFileClip</span><span class="p">(</span><span class="nx">video_path</span><span class="p">).</span><span class="nf">without_audio</span><span class="p">()</span>  <span class="err">#</span> <span class="nx">Remove</span> <span class="nx">the</span> <span class="nx">video</span><span class="err">‚Äô</span><span class="nx">s</span> <span class="nx">audio</span>

    <span class="err">#</span> <span class="nx">Create</span> <span class="nx">text</span> <span class="nx">overlay</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">video</span>
    <span class="nx">txt_clip</span> <span class="o">=</span> <span class="nf">create_text_clip</span><span class="p">(</span><span class="nx">quote_text</span><span class="p">,</span> <span class="nx">author</span><span class="p">,</span> <span class="nx">quote_fontsize</span><span class="o">=</span><span class="mi">70</span><span class="p">,</span> <span class="nx">author_fontsize</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="nx">color</span><span class="o">=</span><span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span> <span class="nx">size</span><span class="o">=</span><span class="nx">video</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Select</span> <span class="nx">random</span> <span class="nx">audio</span> <span class="nx">file</span>
    <span class="nx">audio_files</span> <span class="o">=</span> <span class="p">[</span><span class="nx">f</span> <span class="k">for</span> <span class="nx">f</span> <span class="k">in</span> <span class="nx">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="nx">audio_folder</span><span class="p">)</span> <span class="k">if</span> <span class="nx">f</span><span class="p">.</span><span class="nf">endswith</span><span class="p">((</span><span class="dl">'</span><span class="s1">.mp3</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">.wav</span><span class="dl">'</span><span class="p">))]</span>
    <span class="k">if</span> <span class="nx">not</span> <span class="nx">audio_files</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">No audio files found.</span><span class="dl">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">None</span>

    <span class="nx">selected_audio</span> <span class="o">=</span> <span class="nx">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nx">audio_files</span><span class="p">)</span>
    <span class="nx">audio_path</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">audio_folder</span><span class="p">,</span> <span class="nx">selected_audio</span><span class="p">)</span>
    <span class="nx">audio_clip</span> <span class="o">=</span> <span class="nc">AudioFileClip</span><span class="p">(</span><span class="nx">audio_path</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Loop</span> <span class="nx">the</span> <span class="nx">video</span> <span class="nx">to</span> <span class="nx">match</span> <span class="nx">the</span> <span class="nx">audio</span> <span class="nx">duration</span> <span class="k">if</span> <span class="nx">necessary</span>
    <span class="k">if</span> <span class="nx">video</span><span class="p">.</span><span class="nx">duration</span> <span class="o">&lt;</span> <span class="nx">audio_clip</span><span class="p">.</span><span class="nx">duration</span><span class="p">:</span>
        <span class="nx">video</span> <span class="o">=</span> <span class="nx">video</span><span class="p">.</span><span class="nf">loop</span><span class="p">(</span><span class="nx">duration</span><span class="o">=</span><span class="nx">audio_clip</span><span class="p">.</span><span class="nx">duration</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Create</span> <span class="nx">video</span> <span class="kd">with</span> <span class="nx">overlay</span>
    <span class="nx">video_with_overlay</span> <span class="o">=</span> <span class="nc">CompositeVideoClip</span><span class="p">([</span><span class="nx">video</span><span class="p">,</span> <span class="nx">txt_clip</span><span class="p">]).</span><span class="nf">set_audio</span><span class="p">(</span><span class="nx">audio_clip</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Trim</span> <span class="nx">or</span> <span class="nx">extend</span> <span class="nx">the</span> <span class="nx">video</span> <span class="nx">to</span> <span class="nx">match</span> <span class="nx">the</span> <span class="nx">audio</span> <span class="nx">length</span>
    <span class="nx">final_video</span> <span class="o">=</span> <span class="nx">video_with_overlay</span><span class="p">.</span><span class="nf">subclip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">audio_clip</span><span class="p">.</span><span class="nx">duration</span><span class="p">)</span>

    <span class="err">#</span> <span class="nx">Save</span> <span class="nx">the</span> <span class="nx">final</span> <span class="nx">video</span>
    <span class="nx">output_file</span> <span class="o">=</span> <span class="nf">generate_output_file_name</span><span class="p">(</span><span class="nx">finished_videos_folder</span><span class="p">,</span> <span class="dl">"</span><span class="s2">short_video</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">.mp4</span><span class="dl">"</span><span class="p">)</span>
    <span class="nx">final_video</span><span class="p">.</span><span class="nf">write_videofile</span><span class="p">(</span><span class="nx">output_file</span><span class="p">,</span> <span class="nx">fps</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span> <span class="nx">codec</span><span class="o">=</span><span class="dl">'</span><span class="s1">libx264</span><span class="dl">'</span><span class="p">,</span> <span class="nx">threads</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>

    <span class="k">return</span> <span class="nx">output_file</span><span class="p">,</span> <span class="nx">selected_quote_index</span>


<span class="err">#</span> <span class="nx">Generate</span> <span class="nx">a</span> <span class="nx">unique</span> <span class="nx">output</span> <span class="nx">file</span> <span class="nx">name</span>
<span class="nx">def</span> <span class="nf">generate_output_file_name</span><span class="p">(</span><span class="nx">folder</span><span class="p">,</span> <span class="nx">base_name</span><span class="p">,</span> <span class="nx">extension</span><span class="p">):</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1001</span><span class="p">):</span>
        <span class="nx">file_name</span> <span class="o">=</span> <span class="nx">f</span><span class="dl">"</span><span class="s2">{base_name}_{i}{extension}</span><span class="dl">"</span>
        <span class="nx">file_path</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">folder</span><span class="p">,</span> <span class="nx">file_name</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">not</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="nx">file_path</span><span class="p">):</span>
            <span class="k">return</span> <span class="nx">file_path</span>
    <span class="nx">raise</span> <span class="nc">FileExistsError</span><span class="p">(</span><span class="dl">"</span><span class="s2">All file names are taken.</span><span class="dl">"</span><span class="p">)</span>

<span class="err">#</span> <span class="nx">Update</span> <span class="nx">the</span> <span class="nx">status</span> <span class="k">of</span> <span class="nx">the</span> <span class="nx">quote</span> <span class="nx">to</span> <span class="dl">"</span><span class="s2">used</span><span class="dl">"</span>
<span class="nx">def</span> <span class="nf">update_quote_status</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">,</span> <span class="nx">selected_quote_index</span><span class="p">,</span> <span class="nx">quotes</span><span class="p">):</span>
    <span class="nx">selected_quote</span> <span class="o">=</span> <span class="nx">quotes</span><span class="p">[</span><span class="nx">selected_quote_index</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">if</span> <span class="dl">'</span><span class="s1">", "n"</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">selected_quote</span><span class="p">:</span>
        <span class="nx">updated_quote</span> <span class="o">=</span> <span class="nx">selected_quote</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">", "n"</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">", "y"</span><span class="dl">'</span><span class="p">)</span>
        <span class="nx">quotes</span><span class="p">[</span><span class="nx">selected_quote_index</span><span class="p">]</span> <span class="o">=</span> <span class="nx">updated_quote</span> <span class="o">+</span> <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span>
        <span class="kd">with</span> <span class="nf">open</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">,</span> <span class="dl">'</span><span class="s1">w</span><span class="dl">'</span><span class="p">,</span> <span class="nx">encoding</span><span class="o">=</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">f</span><span class="p">:</span>
            <span class="nx">f</span><span class="p">.</span><span class="nf">writelines</span><span class="p">(</span><span class="nx">quotes</span><span class="p">)</span>

<span class="err">#</span> <span class="nx">Upload</span> <span class="nx">video</span> <span class="nx">to</span> <span class="nx">YouTube</span>
<span class="nx">def</span> <span class="nf">upload_video_to_youtube</span><span class="p">(</span><span class="nx">video_path</span><span class="p">,</span> <span class="nx">credentials_path</span><span class="p">):</span>
    <span class="nx">credentials</span> <span class="o">=</span> <span class="nx">Credentials</span><span class="p">.</span><span class="nf">from_authorized_user_file</span><span class="p">(</span><span class="nx">credentials_path</span><span class="p">,</span> <span class="p">[</span>
        <span class="dl">"</span><span class="s2">https://www.googleapis.com/auth/youtube.upload</span><span class="dl">"</span>
    <span class="p">])</span>

    <span class="nx">youtube</span> <span class="o">=</span> <span class="nf">build</span><span class="p">(</span><span class="dl">'</span><span class="s1">youtube</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">v3</span><span class="dl">'</span><span class="p">,</span> <span class="nx">credentials</span><span class="o">=</span><span class="nx">credentials</span><span class="p">)</span>

    <span class="nx">title</span> <span class="o">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="nx">video_path</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="dl">'</span><span class="s1">.</span><span class="dl">'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="nx">body</span> <span class="o">=</span> <span class="p">{</span>
        <span class="dl">'</span><span class="s1">snippet</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">:</span> <span class="nx">title</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">description</span><span class="dl">'</span><span class="p">:</span> <span class="nx">description</span>
        <span class="p">},</span>
        <span class="dl">'</span><span class="s1">status</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">'</span><span class="s1">privacyStatus</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public</span><span class="dl">'</span><span class="p">,</span>
            <span class="dl">'</span><span class="s1">madeForKids</span><span class="dl">'</span><span class="p">:</span> <span class="nx">False</span>  <span class="err">#</span> <span class="nx">Automatically</span> <span class="kd">set</span> <span class="nx">to</span> <span class="dl">"</span><span class="s2">Not Made for Kids</span><span class="dl">"</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nx">media</span> <span class="o">=</span> <span class="nc">MediaFileUpload</span><span class="p">(</span><span class="nx">video_path</span><span class="p">,</span> <span class="nx">mimetype</span><span class="o">=</span><span class="dl">'</span><span class="s1">video/mp4</span><span class="dl">'</span><span class="p">,</span> <span class="nx">resumable</span><span class="o">=</span><span class="nx">True</span><span class="p">)</span>

    <span class="nx">request</span> <span class="o">=</span> <span class="nx">youtube</span><span class="p">.</span><span class="nf">videos</span><span class="p">().</span><span class="nf">insert</span><span class="p">(</span><span class="nx">part</span><span class="o">=</span><span class="dl">'</span><span class="s1">,</span><span class="dl">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nx">body</span><span class="p">.</span><span class="nf">keys</span><span class="p">()),</span> <span class="nx">body</span><span class="o">=</span><span class="nx">body</span><span class="p">,</span> <span class="nx">media_body</span><span class="o">=</span><span class="nx">media</span><span class="p">)</span>

    <span class="nx">response</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">execute</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">Video uploaded successfully: {response['id']}</span><span class="dl">"</span><span class="p">)</span>



<span class="err">#</span> <span class="nx">Main</span> <span class="nx">program</span> <span class="nx">to</span> <span class="nx">generate</span> <span class="nx">and</span> <span class="nx">upload</span> <span class="nx">videos</span>
<span class="nx">automatedvidgen_path</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">aadit</span><span class="se">\\</span><span class="s2">Downloads</span><span class="se">\\</span><span class="s2">automatedvidgen</span><span class="dl">"</span>
<span class="nx">credentials_path</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">aadit</span><span class="se">\\</span><span class="s2">QUOTELETTOKEN.json</span><span class="dl">"</span>
<span class="nx">quotes_file</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">aadit</span><span class="se">\\</span><span class="s2">Downloads</span><span class="se">\\</span><span class="s2">automatedvidgen</span><span class="se">\\</span><span class="s2">quotes.txt</span><span class="dl">"</span>


<span class="k">try</span><span class="p">:</span>
    <span class="k">if</span> <span class="nx">not</span> <span class="nx">os</span><span class="p">.</span><span class="nx">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">Quotes file not found at: {quotes_file}</span><span class="dl">"</span><span class="p">)</span>
        <span class="nf">input</span><span class="p">(</span><span class="dl">"</span><span class="s2">Press Enter to exit...</span><span class="dl">"</span><span class="p">)</span>
        <span class="nf">exit</span><span class="p">()</span>

    <span class="k">while</span> <span class="nx">True</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="nx">num_videos</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="dl">"</span><span class="s2">How many videos would you like to generate and upload? </span><span class="dl">"</span><span class="p">))</span>
            <span class="k">if</span> <span class="nx">num_videos</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">Please enter a positive number.</span><span class="dl">"</span><span class="p">)</span>
        <span class="nx">except</span> <span class="nx">ValueError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="dl">"</span><span class="s2">Invalid input. Please enter a valid number.</span><span class="dl">"</span><span class="p">)</span>

    <span class="k">for</span> <span class="nx">i</span> <span class="k">in</span> <span class="nf">range</span><span class="p">(</span><span class="nx">num_videos</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">Generating video {i + 1}/{num_videos}...</span><span class="dl">"</span><span class="p">)</span>
        <span class="nx">result</span> <span class="o">=</span> <span class="nf">create_short_video</span><span class="p">(</span><span class="nx">automatedvidgen_path</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">result</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">None</span><span class="p">:</span>
            <span class="nx">output_file</span><span class="p">,</span> <span class="nx">selected_quote_index</span> <span class="o">=</span> <span class="nx">result</span>
            <span class="kd">with</span> <span class="nf">open</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">,</span> <span class="dl">'</span><span class="s1">r</span><span class="dl">'</span><span class="p">,</span> <span class="nx">encoding</span><span class="o">=</span><span class="dl">'</span><span class="s1">utf-8</span><span class="dl">'</span><span class="p">)</span> <span class="nx">as</span> <span class="nx">f</span><span class="p">:</span>
                <span class="nx">quotes</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">()</span>
            <span class="nf">update_quote_status</span><span class="p">(</span><span class="nx">quotes_file</span><span class="p">,</span> <span class="nx">selected_quote_index</span><span class="p">,</span> <span class="nx">quotes</span><span class="p">)</span>

            <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">Uploading video {i + 1}/{num_videos} to YouTube...</span><span class="dl">"</span><span class="p">)</span>
            <span class="nf">upload_video_to_youtube</span><span class="p">(</span><span class="nx">output_file</span><span class="p">,</span> <span class="nx">credentials_path</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">Skipping video {i + 1} due to an error.</span><span class="dl">"</span><span class="p">)</span>

<span class="nx">except</span> <span class="nx">Exception</span> <span class="nx">as</span> <span class="nx">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="nx">f</span><span class="dl">"</span><span class="s2">An error occurred: {e}</span><span class="dl">"</span><span class="p">)</span>

<span class="nf">input</span><span class="p">(</span><span class="dl">"</span><span class="s2">Press Enter to exit...</span><span class="dl">"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>
:ET